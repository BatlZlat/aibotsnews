#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""

import os
import re
import json
import glob
from typing import List, Dict, Any

def extract_json_ld_blocks(content: str) -> List[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ JSON-LD –±–ª–æ–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    blocks = []
    
    # –ò—â–µ–º –≤—Å–µ <script type="application/ld+json"> –±–ª–æ–∫–∏
    pattern = r'<script\s+type="application/ld\+json">\s*(\{.*?\})\s*</script>'
    matches = re.findall(pattern, content, re.DOTALL)
    
    for match in matches:
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
            cleaned = re.sub(r'\s+', ' ', match.strip())
            data = json.loads(cleaned)
            blocks.append(data)
        except json.JSONDecodeError as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É
            try:
                # –ò—â–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
                brace_count = 0
                for i, char in enumerate(cleaned):
                    if char == '{':
                        brace_count += 1
                    elif char == '}':
                        brace_count -= 1
                        if brace_count == 0:
                            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
                            remaining = cleaned[i+1:].strip()
                            if remaining:
                                print(f"    üîç –ù–∞–π–¥–µ–Ω—ã –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ JSON: '{remaining[:50]}...'")
                            break
            except Exception:
                pass
    
    return blocks

def validate_review_schema(data: Dict[str, Any]) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Review schema –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å"""
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['@type', 'headline', 'reviewBody', 'itemReviewed']
    for field in required_fields:
        if field not in data:
            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
    if data.get('@type') != 'Review':
        errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'Review'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º itemReviewed
    if 'itemReviewed' in data:
        item = data['itemReviewed']
        if not isinstance(item, dict):
            errors.append("itemReviewed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        elif item.get('@type') != 'SoftwareApplication':
            errors.append("itemReviewed –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø 'SoftwareApplication'")
        elif 'name' not in item:
            errors.append("itemReviewed –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'name'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º reviewRating
    if 'reviewRating' in data:
        rating = data['reviewRating']
        if not isinstance(rating, dict):
            errors.append("reviewRating –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        elif rating.get('@type') != 'Rating':
            errors.append("reviewRating –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø 'Rating'")
        elif 'ratingValue' not in rating:
            errors.append("reviewRating –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'ratingValue'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    fields_count = {}
    for key in data.keys():
        if key in fields_count:
            errors.append(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è: {key}")
        fields_count[key] = fields_count.get(key, 0) + 1
    
    return {
        'errors': errors,
        'warnings': warnings,
        'is_valid': len(errors) == 0
    }

def validate_breadcrumb_schema(data: Dict[str, Any]) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç BreadcrumbList schema –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å"""
    errors = []
    warnings = []
    
    if data.get('@type') != 'BreadcrumbList':
        errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'BreadcrumbList'")
    
    if 'itemListElement' not in data:
        errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: itemListElement")
    else:
        items = data['itemListElement']
        if not isinstance(items, list):
            errors.append("itemListElement –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º")
        else:
            for i, item in enumerate(items):
                if not isinstance(item, dict):
                    errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {i+1} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
                elif item.get('@type') != 'ListItem':
                    errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {i+1} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø 'ListItem'")
                elif 'position' not in item:
                    errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {i+1} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'position'")
                elif 'name' not in item:
                    errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {i+1} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'name'")
    
    return {
        'errors': errors,
        'warnings': warnings,
        'is_valid': len(errors) == 0
    }

def check_file(file_path: str) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å structured data"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        blocks = extract_json_ld_blocks(content)
        
        if not blocks:
            return {
                'file': file_path,
                'blocks': 0,
                'errors': ['–ù–µ –Ω–∞–π–¥–µ–Ω—ã JSON-LD –±–ª–æ–∫–∏'],
                'warnings': [],
                'is_valid': False
            }
        
        all_errors = []
        all_warnings = []
        valid_blocks = 0
        
        for i, block in enumerate(blocks):
            block_type = block.get('@type', 'Unknown')
            
            if block_type == 'Review':
                result = validate_review_schema(block)
                if result['errors']:
                    all_errors.extend([f"–ë–ª–æ–∫ {i+1} (Review): {error}" for error in result['errors']])
                if result['warnings']:
                    all_warnings.extend([f"–ë–ª–æ–∫ {i+1} (Review): {warning}" for warning in result['warnings']])
                if result['is_valid']:
                    valid_blocks += 1
                    
            elif block_type == 'BreadcrumbList':
                result = validate_breadcrumb_schema(block)
                if result['errors']:
                    all_errors.extend([f"–ë–ª–æ–∫ {i+1} (BreadcrumbList): {error}" for error in result['errors']])
                if result['warnings']:
                    all_warnings.extend([f"–ë–ª–æ–∫ {i+1} (BreadcrumbList): {warning}" for warning in result['warnings']])
                if result['is_valid']:
                    valid_blocks += 1
                    
            else:
                all_warnings.append(f"–ë–ª–æ–∫ {i+1}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø '{block_type}'")
        
        return {
            'file': file_path,
            'blocks': len(blocks),
            'valid_blocks': valid_blocks,
            'errors': all_errors,
            'warnings': all_warnings,
            'is_valid': len(all_errors) == 0 and valid_blocks > 0
        }
        
    except Exception as e:
        return {
            'file': file_path,
            'blocks': 0,
            'errors': [f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}'],
            'warnings': [],
            'is_valid': False
        }

def check_component_generated_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç structured data, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    component_files = [
        'src/app/articles/[slug]/page.tsx',
        'src/app/page.tsx',
        'src/app/reviews/page.tsx',
        'src/app/guides/page.tsx',
        'src/app/news/page.tsx',
        'src/app/ratings/page.tsx',
        'src/app/comparisons/page.tsx'
    ]
    
    component_errors = []
    
    for file_path in component_files:
        if os.path.exists(file_path):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {file_path}")
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã structured data —Ñ—É–Ω–∫—Ü–∏–π
                if 'generateBreadcrumbStructuredData' in content:
                    print(f"  ‚úÖ BreadcrumbList: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                else:
                    print(f"  ‚ö†Ô∏è  BreadcrumbList: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ dangerouslySetInnerHTML
                if 'dangerouslySetInnerHTML' in content:
                    print(f"  ‚úÖ Structured data: –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è")
                else:
                    print(f"  ‚ö†Ô∏è  Structured data: –Ω–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
                component_errors.append(f"{file_path}: {e}")
    
    return component_errors

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –æ–±–∑–æ—Ä–æ–≤
    review_files = []
    review_files.extend(glob.glob("content/articles/reviews/*.md"))
    review_files.extend(glob.glob("content/reviews/*.md"))
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(review_files)} —Ñ–∞–π–ª–æ–≤ –æ–±–∑–æ—Ä–æ–≤")
    print()
    
    results = []
    total_errors = 0
    total_warnings = 0
    
    for file_path in review_files:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {file_path}")
        result = check_file(file_path)
        results.append(result)
        
        if result['errors']:
            for error in result['errors']:
                print(f"  ‚ùå {error}")
                total_errors += 1
        
        if result['warnings']:
            for warning in result['warnings']:
                print(f"  ‚ö†Ô∏è  {warning}")
                total_warnings += 1
        
        if result['is_valid']:
            print(f"  ‚úÖ –§–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ({result['valid_blocks']}/{result['blocks']} –±–ª–æ–∫–æ–≤)")
        else:
            print(f"  ‚ùå –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
        
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    component_errors = check_component_generated_data()
    
    print("=" * 60)
    print("üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
    
    valid_files = sum(1 for r in results if r['is_valid'])
    total_files = len(results)
    
    print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {valid_files}/{total_files}")
    print(f"‚ùå –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {total_files - valid_files}")
    print(f"ÔøΩÔøΩ –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {(valid_files/total_files*100):.1f}%")
    print(f"üö® –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
    print(f"‚ö†Ô∏è  –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
    
    if component_errors:
        print(f"üîß –û—à–∏–±–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö: {len(component_errors)}")
    
    if total_errors == 0 and len(component_errors) == 0:
        print("\nüéâ –í–°–ï –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï –ö–û–†–†–ï–ö–¢–ù–´!")
    else:
        print("\n‚ö†Ô∏è  –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ structured data")
    
    print("=" * 60)

if __name__ == "__main__":
    main() 