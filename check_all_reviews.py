#!/usr/bin/env python3
import json
import re
import os
from pathlib import Path

def extract_json_from_script(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ script —Ç–µ–≥–æ–≤"""
    pattern = r'<script type="application/ld\+json">(.*?)</script>'
    matches = re.findall(pattern, content, re.DOTALL)
    return matches

def validate_json(json_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON"""
    try:
        json.loads(json_str)
        return True, None
    except json.JSONDecodeError as e:
        return False, str(e)

def check_review_schema(json_data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Review schema"""
    required_fields = ['@type', 'headline', 'reviewBody', 'itemReviewed']
    missing_fields = []
    
    for field in required_fields:
        if field not in json_data:
            missing_fields.append(field)
    
    return missing_fields

def check_item_reviewed_schema(json_data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É itemReviewed"""
    if 'itemReviewed' not in json_data:
        return ["itemReviewed –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"]
    
    item = json_data['itemReviewed']
    required_fields = ['@type', 'name', 'url']
    missing_fields = []
    
    for field in required_fields:
        if field not in item:
            missing_fields.append(f"itemReviewed.{field}")
    
    return missing_fields

def check_review_rating_schema(json_data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É reviewRating"""
    if 'reviewRating' not in json_data:
        return ["reviewRating –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"]
    
    rating = json_data['reviewRating']
    required_fields = ['@type', 'ratingValue', 'bestRating', 'worstRating']
    missing_fields = []
    
    for field in required_fields:
        if field not in rating:
            missing_fields.append(f"reviewRating.{field}")
    
    return missing_fields

def check_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    json_blocks = extract_json_from_script(content)
    
    if not json_blocks:
        print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –±–ª–æ–∫–∏ application/ld+json")
        return False
    
    file_has_errors = False
    
    for i, json_str in enumerate(json_blocks):
        print(f"  üìÑ –ë–ª–æ–∫ {i+1}:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
        is_valid, error = validate_json(json_str)
        if not is_valid:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ JSON: {error}")
            file_has_errors = True
            continue
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            data = json.loads(json_str)
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            file_has_errors = True
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
        if '@type' in data:
            print(f"    ‚úÖ –¢–∏–ø: {data['@type']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Review schema
            if data['@type'] == 'Review':
                print("    üìã –ü—Ä–æ–≤–µ—Ä—è—é Review schema...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                missing_fields = check_review_schema(data)
                if missing_fields:
                    print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
                    file_has_errors = True
                else:
                    print("    ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º itemReviewed
                item_errors = check_item_reviewed_schema(data)
                if item_errors:
                    print(f"    ‚ùå –û—à–∏–±–∫–∏ –≤ itemReviewed: {', '.join(item_errors)}")
                    file_has_errors = True
                else:
                    print("    ‚úÖ itemReviewed –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º reviewRating
                rating_errors = check_review_rating_schema(data)
                if rating_errors:
                    print(f"    ‚ùå –û—à–∏–±–∫–∏ –≤ reviewRating: {', '.join(rating_errors)}")
                    file_has_errors = True
                else:
                    print("    ‚úÖ reviewRating –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
                item_reviewed_count = json_str.count('"itemReviewed"')
                if item_reviewed_count > 1:
                    print(f"    ‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ itemReviewed: –Ω–∞–π–¥–µ–Ω–æ {item_reviewed_count} –≤—Ö–æ–∂–¥–µ–Ω–∏–π")
                    file_has_errors = True
                else:
                    print("    ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                if not file_has_errors:
                    print("    üéâ Review schema –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
            
            elif data['@type'] == 'BreadcrumbList':
                print("    ‚úÖ BreadcrumbList –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                print(f"    ‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {data['@type']}")
        else:
            print("    ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ @type")
            file_has_errors = True
    
    return not file_has_errors

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –æ–±–∑–æ—Ä–æ–≤
    review_paths = [
        "content/articles/reviews/",
        "content/reviews/"
    ]
    
    all_files = []
    for path in review_paths:
        if os.path.exists(path):
            for file in os.listdir(path):
                if file.endswith('.md'):
                    all_files.append(os.path.join(path, file))
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤ –æ–±–∑–æ—Ä–æ–≤")
    print("=" * 60)
    
    correct_files = 0
    total_files = 0
    
    for file_path in all_files:
        total_files += 1
        if check_file(file_path):
            correct_files += 1
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
    print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {correct_files}")
    print(f"‚ùå –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {total_files - correct_files}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {(correct_files/total_files*100):.1f}%")
    
    if correct_files == total_files:
        print("\nüéâ –í–°–ï –§–ê–ô–õ–´ –ö–û–†–†–ï–ö–¢–ù–´! –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è Google.")
    else:
        print(f"\n‚ö†Ô∏è  –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {total_files - correct_files} —Ñ–∞–π–ª–æ–≤.")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main() 