#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–ü–µ—Ä–µ–≤–æ–¥ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
"""

import requests
import json
import time
import re
from bs4 import BeautifulSoup
from googletrans import Translator
import openai
import os
from datetime import datetime
import hashlib
import random

class ContentProcessor:
    def __init__(self, openai_api_key):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            openai_api_key (str): API –∫–ª—é—á OpenAI –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        """
        self.translator = Translator()
        openai.api_key = openai_api_key
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
    
    def fetch_content(self, url):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            url (str): URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∞—Ç—å–∏
        """
        try:
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for element in soup(['script', 'style', 'nav', 'footer', 'header']):
                element.decompose()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = soup.find('h1')
            title_text = title.get_text().strip() if title else "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content_elements = []
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –±–ª–æ–∫–∏
            for tag in ['article', 'main', '.content', '.post-content', '.entry-content']:
                elements = soup.select(tag)
                if elements:
                    content_elements.extend(elements)
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏, –±–µ—Ä–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            if not content_elements:
                content_elements = soup.find_all('p')
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
            content_text = ""
            for element in content_elements:
                text = element.get_text().strip()
                if len(text) > 50:  # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                    content_text += text + "\n\n"
            
            return {
                'title': title_text,
                'content': content_text,
                'url': url,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å {url}: {e}")
            return None
    
    def translate_text(self, text, target_lang='ru'):
        """
        –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Google Translate
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            target_lang (str): –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
            
        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            max_length = 4000
            parts = [text[i:i+max_length] for i in range(0, len(text), max_length)]
            
            translated_parts = []
            for part in parts:
                if part.strip():
                    translation = self.translator.translate(part, dest=target_lang)
                    translated_parts.append(translation.text)
                    time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            return ' '.join(translated_parts)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
            return text
    
    def add_unique_elements(self, content):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
        
        Args:
            content (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            str: –ö–æ–Ω—Ç–µ–Ω—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        """
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–µ–π—Å—ã
        russian_examples = [
            "–ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è '–†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞' –≤–Ω–µ–¥—Ä–∏–ª–∞ –ò–ò –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏–ª–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ 300%.",
            "–í –†–æ—Å—Å–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã —Ç–∞–∫–∏–µ –ò–ò –±–æ—Ç—ã –∫–∞–∫ Yandex.Alice, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ —á–µ–º 50 –º–∏–ª–ª–∏–æ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            "–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ò–ò —Ä–µ—à–µ–Ω–∏—è, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –º–µ—Å—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫ –∏ –∫—É–ª—å—Ç—É—Ä—É.",
            "–ü–æ –¥–∞–Ω–Ω—ã–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –†–ê–≠–ö, 67% —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä—É—é—Ç –≤–Ω–µ–¥—Ä–∏—Ç—å –ò–ò –±–æ—Ç–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –≥–æ–¥–∞.",
            "–í —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞—Ö —É–∂–µ –ø—Ä–µ–ø–æ–¥–∞—é—Ç –∫—É—Ä—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ò–ò –±–æ—Ç–∞–º–∏, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ä–∞—Å—Ç—É—â–µ–º —Å–ø—Ä–æ—Å–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."
        ]
        
        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        russian_tips = [
            "–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ò–ò –±–æ—Ç–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
            "–†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—Å—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –ò–ò –±–æ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –º–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.",
            "–î–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –≤–∞–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –ò–ò –±–æ—Ç–æ–≤ —Å —Ö–æ—Ä–æ—à–µ–π —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –ò–ò –±–æ—Ç–∞–º–∏ - —ç—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤.",
            "–í –†–æ—Å—Å–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã –ò–ò –±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ –ø–æ–Ω–∏–º–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ –∏–¥–∏–æ–º—ã."
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
            example = random.choice(russian_examples)
            content += f"\n\n{example}"
        
        if random.random() < 0.4:  # 40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞
            tip = random.choice(russian_tips)
            content += f"\n\nüí° **–°–æ–≤–µ—Ç –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {tip}"
        
        return content
    
    def rewrite_content_structure(self, content):
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            content (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            str: –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        paragraphs = content.split('\n\n')
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if len(paragraphs) > 4:
            middle_paragraphs = paragraphs[1:-1]
            random.shuffle(middle_paragraphs)
            paragraphs = [paragraphs[0]] + middle_paragraphs + [paragraphs[-1]]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        new_content = ""
        for i, paragraph in enumerate(paragraphs):
            if i == 0:
                new_content += paragraph + "\n\n"
            elif len(paragraph) > 100 and random.random() < 0.3:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ –¥–ª–∏–Ω–Ω—ã–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º
                first_sentence = paragraph.split('.')[0]
                if len(first_sentence) < 100:
                    new_content += f"### {first_sentence}\n\n{paragraph}\n\n"
                else:
                    new_content += paragraph + "\n\n"
            else:
                new_content += paragraph + "\n\n"
        
        return new_content.strip()
    
    def adapt_content_with_ai(self, content, content_type="article"):
        """
        –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI
        
        Args:
            content (str): –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            content_type (str): –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (article, review, news, guide)
            
        Returns:
            str: –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        try:
            prompts = {
                "article": "–ê–¥–∞–ø—Ç–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è. –°–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –∏–∑–º–µ–Ω–∏ —Å—Ç–∏–ª—å –Ω–∞ –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π. –î–æ–±–∞–≤—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
                "review": "–ê–¥–∞–ø—Ç–∏—Ä—É–π —ç—Ç–æ—Ç –æ–±–∑–æ—Ä –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è. –î–æ–±–∞–≤—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª—å–∑–µ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–∫–ª—é—á–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–µ–π—Å—ã.",
                "news": "–ê–¥–∞–ø—Ç–∏—Ä—É–π —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è. –û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ç–æ–º, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                "guide": "–ê–¥–∞–ø—Ç–∏—Ä—É–π —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è. –°–¥–µ–ª–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏. –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
            }
            
            prompt = prompts.get(content_type, prompts["article"])
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç."},
                    {"role": "user", "content": f"{prompt}\n\n–¢–µ–∫—Å—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:\n{content[:3000]}"}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                ],
                max_tokens=2000,
                temperature=0.8  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
            )
            
            adapted_content = response.choices[0].message.content
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            adapted_content = self.add_unique_elements(adapted_content)
            
            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            adapted_content = self.rewrite_content_structure(adapted_content)
            
            return adapted_content
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å –ò–ò: {e}")
            return content
    
    def check_uniqueness(self, content):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±–∞–∑–æ–≤–∞—è)
        
        Args:
            content (str): –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –∏ –¥–ª–∏–Ω—ã
        content_hash = hashlib.md5(content.encode()).hexdigest()
        content_length = len(content)
        unique_words = len(set(content.lower().split()))
        total_words = len(content.split())
        
        uniqueness_score = (unique_words / total_words) * 100 if total_words > 0 else 0
        
        return {
            'hash': content_hash,
            'length': content_length,
            'unique_words': unique_words,
            'total_words': total_words,
            'uniqueness_score': uniqueness_score,
            'is_unique': uniqueness_score > 70  # –ü–æ—Ä–æ–≥ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        }
    
    def optimize_for_seo(self, title, content, keywords):
        """
        SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫
            content (str): –ö–æ–Ω—Ç–µ–Ω—Ç
            keywords (list): –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            
        Returns:
            dict: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –º–µ—Ç–∞-—Ç–µ–≥–∞–º–∏
        """
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if keywords:
            main_keyword = keywords[0]
            if main_keyword.lower() not in title.lower():
                title = f"{title} - {main_keyword}"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(title) > 60:
            title = title[:57] + "..."
        
        # –°–æ–∑–¥–∞–µ–º description
        description = content[:150] + "..." if len(content) > 150 else content
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
        optimized_content = content
        for keyword in keywords[:3]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
            if keyword.lower() not in optimized_content.lower():
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                paragraphs = optimized_content.split('\n\n')
                if paragraphs:
                    first_para = paragraphs[0]
                    if keyword.lower() not in first_para.lower():
                        paragraphs[0] = f"{first_para} {keyword}."
                        optimized_content = '\n\n'.join(paragraphs)
        
        return {
            'title': title,
            'content': optimized_content,
            'meta_description': description,
            'keywords': ', '.join(keywords)
        }
    
    def process_article(self, url, content_type="article", keywords=None):
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏
        
        Args:
            url (str): URL —Å—Ç–∞—Ç—å–∏
            content_type (str): –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            keywords (list): –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è SEO
            
        Returns:
            dict: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è
        """
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∞—Ç—å—é: {url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        raw_content = self.fetch_content(url)
        if not raw_content:
            return None
        
        print("‚úì –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        translated_title = self.translate_text(raw_content['title'])
        print("‚úì –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç
        translated_content = self.translate_text(raw_content['content'])
        print("‚úì –ö–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω")
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
        adapted_content = self.adapt_content_with_ai(translated_content, content_type)
        print("‚úì –ö–æ–Ω—Ç–µ–Ω—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        uniqueness_check = self.check_uniqueness(adapted_content)
        print(f"‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {uniqueness_check['uniqueness_score']:.1f}%")
        
        # SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        if keywords:
            optimized = self.optimize_for_seo(translated_title, adapted_content, keywords)
        else:
            optimized = {
                'title': translated_title,
                'content': adapted_content,
                'meta_description': adapted_content[:150] + "...",
                'keywords': ""
            }
        
        print("‚úì SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        return {
            'original_url': url,
            'processed_at': datetime.now().isoformat(),
            'content_type': content_type,
            'title': optimized['title'],
            'content': optimized['content'],
            'meta_description': optimized['meta_description'],
            'keywords': optimized['keywords'],
            'uniqueness_check': uniqueness_check
        }
    
    def save_article(self, article, output_dir="processed_articles"):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏
        
        Args:
            article (dict): –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è
            output_dir (str): –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_title = re.sub(r'[^\w\s-]', '', article['title'])
        safe_title = re.sub(r'[-\s]+', '-', safe_title)
        filename = f"{safe_title[:50]}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        filepath = os.path.join(output_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(article, f, ensure_ascii=False, indent=2)
        
        print(f"‚úì –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
        return filepath

def main():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    OPENAI_API_KEY = "your-openai-api-key-here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    processor = ContentProcessor(OPENAI_API_KEY)
    
    # –ü—Ä–∏–º–µ—Ä—ã URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    urls_to_process = [
        {
            'url': 'https://blog.openai.com/chatgpt-update/',
            'type': 'news',
            'keywords': ['ChatGPT', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–ò–ò –±–æ—Ç']
        },
        {
            'url': 'https://www.anthropic.com/news/claude-3-release',
            'type': 'review',
            'keywords': ['Claude', '–æ–±–∑–æ—Ä', '–ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç']
        }
    ]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π
    for url_data in urls_to_process:
        try:
            article = processor.process_article(
                url=url_data['url'],
                content_type=url_data['type'],
                keywords=url_data['keywords']
            )
            
            if article:
                processor.save_article(article)
                print(f"‚úì –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {article['title']}")
            else:
                print(f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é: {url_data['url']}")
                
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url_data['url']}: {e}")
        
        time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç–∞—Ç–µ–π

if __name__ == "__main__":
    main() 